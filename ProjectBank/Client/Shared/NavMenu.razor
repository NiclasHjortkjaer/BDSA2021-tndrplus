@using System.Security.Claims
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/browse"><img src="Logo_white_projectBank.png" height="75%" width="75%"/></a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/browse" Match="NavLinkMatch.All">
                <span class="oi oi-globe" aria-hidden="true"></span> Browse
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="search">
                <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search
            </NavLink>
        </div>
        @*<div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-wrench" aria-hidden="true"></span> Settings
            </NavLink>
        </div>*@
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="account/settings">
                <span class="oi oi-pencil" aria-hidden="true"></span> Settings
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="account/claims">
            <span class="oi oi-pencil" aria-hidden="true"></span> Claims
            </NavLink>
        </div>
    </nav>
</div>
<hr>
<br>
<div class="favoriteList" >
    @if (favorites == null)
    {
        
    }else{
        @foreach (var favorite in favorites)
        {
            <ul onclick="location.href='https://youtube.com'">@favorite</ul>   
        }
    }
</div>

@code {
    private IEnumerable<string> favorites = null!;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var account = await Http.GetFromJsonAsync<AccountDetailsDto>("/api/Account/1");
            if (account != null)
            {
                var savedProjects = account.SavedProjects;
                favorites = savedProjects;
            }
        }
    }

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void FavoriteNavigate(string favorite)
    {
        navigationManager.NavigateTo("/projects/"+favorite);
    }

}
