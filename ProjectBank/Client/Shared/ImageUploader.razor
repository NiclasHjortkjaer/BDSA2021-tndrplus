@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject DialogService _dialogService
@inject NotificationService _notificationService;

<div class="form-group input-group">
    <InputFile id="Image" OnChange="@OnFileSelection" accept=".png, .jpeg, .gif, .jpg" class="form-control"/>
</div>


<div class="form-group">
    @if (!string.IsNullOrWhiteSpace(_imageUrl))
    {
        <div style="display: flex; justify-content: center; align-content: center; padding: 1em"><img src="@_imageUrl" alt="Project Image" class="img-thumbnail"></div>
        <div style="padding: 0.5em; display: grid; grid-template-columns: 50% 50%; text-align: center">
            <RadzenButton style="width: 90%; text-align: center; background: linear-gradient(10deg, #fd297b, #ff655b)" 
                            BusyText="Saving ..." IsBusy=@_busy Click=@UploadImage Text="Upload"/>
            <RadzenButton style="width: 90%; text-align: center; background: linear-gradient(10deg, #fd297b, #ff655b)" 
                            IsBusy=@_busy Click=@ClearImage Text="Clear"/>
        </div>

    }
    @if (_sizeExceeded)
    {
        <div style="display: flex; justify-content: center; align-content: center; padding: 1em; color: red">Maximum file size of 1.24 mb exceded.</div>
    }
</div>

@code {

    [Parameter]
    public int Id { get; set; }
    
    [Parameter]
    public EventCallback OnUpdate { get; set; }
    private ProjectDetailsDto? _toBeUpdated;
    private ProjectUpdateDto? _project;
    private string _imageName = Guid.NewGuid().ToString();
    private string _imageUrl = string.Empty;
    private IBrowserFile? _imageFile;
    private bool _sizeExceeded = false;
    private bool _busy = false;

    protected async Task LoadProject()
    {
        try
        {
            _toBeUpdated = await _http.GetFromJsonAsync<ProjectDetailsDto>($"api/Project/{Id}");
            if (_toBeUpdated != null)
            {
                _project = new ProjectUpdateDto()
                {
                    Id = _toBeUpdated.Id, Degree = _toBeUpdated.Degree, Title = _toBeUpdated.Title,
                    Description = _toBeUpdated.Description, Ects = _toBeUpdated.Ects, Keywords = _toBeUpdated.Keywords, AuthorName = _toBeUpdated.AuthorName,
                    AuthorToken = _toBeUpdated.AuthorToken, FileUrl = _toBeUpdated.FileUrl, ImageUrl = _toBeUpdated.ImageUrl, LastUpdated = DateTime.UtcNow
                };
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e); //Should not throw
        }
    }

    private async Task UploadImage()
    {
        _busy = true;

        if (_imageFile != null)
        {
            var bytes = new byte[_imageFile.Size];
            await _imageFile.OpenReadStream(1024000).ReadAsync(bytes);
            var byteContent = new ByteArrayContent(bytes);
            byteContent.Headers.ContentType = new MediaTypeHeaderValue(_imageFile.ContentType);
            var content = new MultipartFormDataContent();
            content.Add(byteContent, "file", _imageFile.Name);
            var response = await _http.PostAsync($"api/Image/{_imageName}", content);

            if (response.IsSuccessStatusCode && _project != null)
            {
                _project.ImageUrl = response.Headers.Location?.ToString();
                var updated = await _http.PutAsJsonAsync($"api/Project/{_project.Id}", _project);
                Console.WriteLine(updated.StatusCode);

                var success = new NotificationMessage {Severity = NotificationSeverity.Success, Summary = "Successfully added Image!", Detail = "", Duration = 4000};
                _notificationService.Notify(success);

                //Removes the image from the image uploader
                _imageUrl = "";

                //Calls the parent component
                await OnUpdate.InvokeAsync();
            }
            _busy = false;
        }
    }

    private async Task ClearImage()
    {
        _busy = true;
        _imageUrl = string.Empty;
        _imageFile = null;
        await Task.Delay(2000);
        _busy = false;
    }

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        await LoadProject();
        _sizeExceeded = false;
        _imageFile = e.GetMultipleFiles().FirstOrDefault();

        if (_imageFile != null)
        {
            try
            {
                var bytes = new byte[_imageFile.Size];
                await _imageFile.OpenReadStream(1024000).ReadAsync(bytes);
                var contentType = _imageFile.ContentType;
                _imageUrl = $"data:{contentType};base64,{Convert.ToBase64String(bytes)}";
            }
            catch (IOException exception)
            {
                _sizeExceeded = true;
                Console.WriteLine(exception);
            }

        }
    }
}    
