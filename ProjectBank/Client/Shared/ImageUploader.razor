@inject HttpClient _http
@inject NavigationManager _navigationManager

@if (IsProject)
{
    <div class="form-group input-group">
        <InputFile id="Image" OnChange="@OnFileSelection" accept=".png, .jpeg, .gif, .jpg" class="form-control"/>
    </div>
}
else
{
    <div class="profile_no_pic" style="background-image: url('./Unknown_profile_pic.png')">
        <InputFile class="img_profile_overlay" id="Image" style="display: none" OnChange="@OnFileSelection" accept=".png, .jpeg, .gif, .jpg"></InputFile>
        <label for="Image" class="overlay"><span>Upload</span></label>
    </div>
}

@if (IsProject)
{
    <div class="form-group">
        @if (!string.IsNullOrWhiteSpace(_imageUrl))
        {
            <div style="display: flex; justify-content: center; align-content: center; padding: 1em"><img src="@_imageUrl" alt="Project Image" class="img-thumbnail"></div>
            <div style="padding: 0.5em">
                <RadzenButton style="width: 160px" Icon="save" BusyText="Saving ..." IsBusy=@_busy Click=@UploadImage Text="Upload"/>
                <RadzenButton style="width: 160px" IsBusy=@_busy Click=@ClearImage Text="Clear"/>
            </div>

        }
        @if (_sizeExceeded)
        {
            <div style="display: flex; justify-content: center; align-content: center; padding: 1em; color: red">Maximum file size of 1.24 mb exceded.</div>
        }
    </div>
}
else //make a preview of profile picture.
{
    <div>
        
    </div>
}
@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public bool IsProject { get; set; }
    private ProjectDetailsDto? _toBeUpdated;
    private AccountDetailsDto? _toBeUpdatedAccount;
    private ProjectUpdateDto? _project;
    private AccountUpdateDto? _account;
    private string _imageName = Guid.NewGuid().ToString();
    private string _imageUrl = string.Empty;
    private IBrowserFile? _imageFile;
    private bool _sizeExceeded = false;
    private bool _busy = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (IsProject)//if project
        {
            _toBeUpdated = await _http.GetFromJsonAsync<ProjectDetailsDto>($"api/Project/{Id}");
            if (_toBeUpdated != null)
            {
                _project = new ProjectUpdateDto()
                {
                    Id = _toBeUpdated.Id, Degree = _toBeUpdated.Degree, Title = _toBeUpdated.Title,
                    Description = _toBeUpdated.Description, Ects = _toBeUpdated.Ects, Keywords = _toBeUpdated.Keywords, AuthorName = _toBeUpdated.AuthorName,
                    AuthorToken = _toBeUpdated.AuthorToken, FileUrl = _toBeUpdated.FileUrl, ImageUrl = _toBeUpdated.ImageUrl, LastUpdated = DateTime.UtcNow
                };
            }
        }
        else //if account
        {
            _toBeUpdatedAccount = await _http.GetFromJsonAsync<AccountDetailsDto>($"api/Account/getBy/{Id}");

                if (_toBeUpdatedAccount != null)
                {
                    _account = new AccountUpdateDto()
                    {
                        Id = _toBeUpdatedAccount.Id, PictureUrl = _toBeUpdatedAccount.PictureUrl, Name = _toBeUpdatedAccount.Name,
                        SavedProjects = _toBeUpdatedAccount.SavedProjects, AzureAAdToken = _toBeUpdatedAccount.AzureAdToken
                    };
                }
        }
        }
        catch (Exception e)
        {
            Console.WriteLine(e); //Should not throw
        }
    }

    private async Task UploadImage()
    {
        _busy = true;

        if (_imageFile != null)
        {
            var bytes = new byte[_imageFile.Size];
            await _imageFile.OpenReadStream(1024000).ReadAsync(bytes);
            var byteContent = new ByteArrayContent(bytes);
            byteContent.Headers.ContentType = new MediaTypeHeaderValue(_imageFile.ContentType);
            var content = new MultipartFormDataContent();
            content.Add(byteContent, "file", _imageFile.Name);
            var response = await _http.PostAsync($"api/Image/{_imageName}", content);

            if (response.IsSuccessStatusCode)
            {
                if (_project != null)
                {
                    {
                        _project.ImageUrl = response.Headers.Location?.ToString();
                        var updated = await _http.PutAsJsonAsync($"api/Project/{_project.Id}", _project);
                        Console.WriteLine(updated.StatusCode);
                    }
                }
                else if (_account != null)
                {
                    {
                        _account.PictureUrl = response.Headers.Location?.ToString();
                        var updated = await _http.PutAsJsonAsync($"api/Account/{_account.Id}", _account);
                        Console.WriteLine(updated.StatusCode);
                    }
                }
                _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
            }
            await Task.Delay(2000);
            _busy = false;
        }
    }
    private async Task ClearImage()
    {
        _busy = true;
        _imageUrl = string.Empty;
        _imageFile = null;
        await Task.Delay(2000);
        _busy = false;
    }

    private void Cancel()
    {
        var uri = $"{_navigationManager.BaseUri}";

        _navigationManager.NavigateTo(uri);
        
    }

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        _sizeExceeded = false;
        _imageFile = e.GetMultipleFiles().FirstOrDefault();

        if (_imageFile != null)
        {
            try
            {
                var bytes = new byte[_imageFile.Size];
                await _imageFile.OpenReadStream(1024000).ReadAsync(bytes);
                var contentType = _imageFile.ContentType;
                _imageUrl = $"data:{contentType};base64,{Convert.ToBase64String(bytes)}";
            }
            catch (IOException exception)
            {
                _sizeExceeded = true;
                Console.WriteLine(exception);
            }
            
        }
    }
} 