@page "/user/{AuthName}"
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject DialogService _dialogService
@inject NotificationService _notificationService;


<RadzenDialog />
<RadzenNotification/>
<h1>Search for @AuthName:</h1>

@if (_projects == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="row my-5">
    <div class="col-lg-6 col-xl-4 offset-lg-3 offset-xl-4">
        <RadzenCard class="m-6">
            <h3 class="h5" style="color:black;">"@AuthName":</h3>
            <div class="d-flex flex-row">
                <div>
                    <div style="color:black;">Authored project ideas (@_projects.Length):</div>
                    <div style="color:black;">
                        @if (_projects != null)
                        {
                            foreach (var project in _projects)
                            {
                                <div><i><x @onclick="() => Navigate(project)" style="cursor: pointer;">@project.Title</x></i></div>
                            }
                        }
                    </div>
                </div>
            </div>

             <h4 style="color:black;">_____________________</h4> 
            <div>
                   <RadzenButton style="width: 250px" Icon="accessibility" BusyText="Saving ..." Text="Contact Author" Click=@ShowCloseableFromOverlayDialog  />

            </div>
        </RadzenCard>
    </div>
</div>
}

@code {
    [Parameter]
    public string? AuthName { get; set; }
    private ProjectDetailsDto[]? _projects;

    protected override async Task OnInitializedAsync()
    {
          _dialogService.OnOpen += Open;
        _dialogService.OnClose += Close;
        _projects = await _http.GetFromJsonAsync<ProjectDetailsDto[]>("/api/Project/"+AuthName);
    }

    private void Navigate(ProjectDetailsDto p){
        _navigationManager.NavigateTo("/projects/" + p.Id);
    }
     void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
       
    }

    void Close(dynamic result)
    {
      // NotificationMessage success = new NotificationMessage {Severity = NotificationSeverity.Success, Summary = "Message send", Detail = "", Duration = 4000};
        //    _notificationService.Notify(success);
    }

    void ShowNotification(NotificationMessage message)
    {
        _notificationService.Notify(message);
    }

     async Task ShowCloseableFromOverlayDialog()
    {
        var email =AuthName?.ToString()+".gmail.com";
        email =email.Replace(" ", String.Empty);
        await _dialogService.OpenAsync("", ds =>
        @<div style="color:black;">
            <div>
            <h2 style="color:black;">Author Information</h2> </div>
            <div>
        Name: @AuthName </div> 
        <div> 
        Email: @email</div>
        <div>
            <RadzenTextArea Placeholder="Write message" Style="height:75px;width:100px"/>
          <div>
            <RadzenButton style="width: 75px;" BusyText="Saving ..." Text="Send" Click="@(args => ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Applied", Detail = "placeholder", Duration = 4000 }))"/>
            <RadzenButton style="width: 75px;" BusyText="Saving ..." Text="Close" Click="() => ds.Close(true)"/>
          </div>
        </div>
        </div>, new DialogOptions() { CloseDialogOnOverlayClick = true });
    }
    
} 