@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService;

<div class="form-group input-group">
    @*<RadzenUpload Multiple="true" id="Image" Accept="image/*" OnChange="@OnFileSelection" Url="upload/multiple" Style="margin-bottom: 15px;">Image</RadzenUpload>
    <RadzenButton Text="Clear" Click="ClearImage" Style="margin-bottom: 15px;" />*@
    <InputFile id="pdf" OnChange="@OnFileSelection" accept=".pdf" class="form-control"/>
</div>
<div class="form-group">
        @if (!string.IsNullOrWhiteSpace(_fileUrl))
        {
            <div style="display: flex; justify-content: center; align-content: center; padding: 1em"><a style="color: #0a53be" href="@_fileUrl" download="@_fileName">Preview file</a></div>
            <div style="padding: 0.5em; display: grid; grid-template-columns: 50% 50%; text-align: center">
                <RadzenButton style="width: 90%; text-align: center; background: linear-gradient(10deg, #fd297b, #ff655b)" 
                              BusyText="Saving ..." IsBusy=@_busy Click=@UploadFile Text="Upload"/>
                <RadzenButton style="width: 90%; text-align: center; background: linear-gradient(10deg, #fd297b, #ff655b)" 
                              IsBusy=@_busy Click=@ClearFile Text="Clear"/>
            </div>

        }@if (_sizeExceeded)
         {
             <div style="display: flex; justify-content: center; align-content: center; padding: 1em; color: red">Maximum file size of 1.24 mb exceded.</div>
         }
</div>
@code {

    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public EventCallback OnUpdate { get; set; }

    private ProjectDetailsDto? _toBeUpdated;

    public ProjectUpdateDto? Project;

    private string _fileName = Guid.NewGuid().ToString();

    private string _fileUrl = string.Empty;

    private IBrowserFile? _pdfFile;
    private bool _busy;

    private bool _sizeExceeded;
    protected async Task LoadProject()
    {
        _toBeUpdated = await _http.GetFromJsonAsync<ProjectDetailsDto>($"api/Project/{ProjectId}");
        if (_toBeUpdated != null)
        {
            Project = new ProjectUpdateDto()
            {
                Id = _toBeUpdated.Id, Degree = _toBeUpdated.Degree, Title = _toBeUpdated.Title,
                Description = _toBeUpdated.Description, Ects = _toBeUpdated.Ects, Keywords = _toBeUpdated.Keywords, AuthorName = _toBeUpdated.AuthorName,
                AuthorToken = _toBeUpdated.AuthorToken, FileUrl = _toBeUpdated.FileUrl, ImageUrl = _toBeUpdated.ImageUrl, LastUpdated = DateTime.UtcNow
            };
        }
    }
    
    private async Task UploadFile()
    {
        _busy = true;
        if (_pdfFile != null)
        {
            var bytes = new byte[_pdfFile.Size];
            await _pdfFile.OpenReadStream(1024000).ReadAsync(bytes);
            var byteContent = new ByteArrayContent(bytes);
            byteContent.Headers.ContentType = new MediaTypeHeaderValue(_pdfFile.ContentType);
            var content = new MultipartFormDataContent();
            content.Add(byteContent, "file", _pdfFile.Name);
            var response = await _http.PostAsync($"api/Pdf/{_fileName}", content);

            if (response.IsSuccessStatusCode && Project != null)
            {
                Project.FileUrl = response.Headers.Location?.ToString();
                var updated = await _http.PutAsJsonAsync($"api/Project/{Project.Id}", Project);
                Console.WriteLine(updated.StatusCode);

                var success = new NotificationMessage {Severity = NotificationSeverity.Success, Summary = "Successfully added PDF!", Detail = "", Duration = 4000};
                _notificationService.Notify(success);

                //Removes the file from the file uploader
                _fileUrl = "";

                //Calls the parent component
                await OnUpdate.InvokeAsync();
            }
        }
        _busy = false;
    }

    private async Task ClearFile()
    {
        _busy = true;
        _fileUrl = string.Empty;
        _pdfFile = null;
        StateHasChanged();
        await Task.Delay(2000);
        _busy = false;
    }

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault()?.ContentType;
        if (file != null && !file.Contains("pdf"))
        {
            var error = new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "Something went wrong", Detail = "Please only provide the following file type: .pdf", Duration = 4000};
            _notificationService.Notify(error);
            return;
        }

        await LoadProject();
        
        _sizeExceeded = false;
        _pdfFile = e.GetMultipleFiles().FirstOrDefault();

        if (_pdfFile != null)
        {
            try
            {
                var bytes = new byte[_pdfFile.Size];
                await _pdfFile.OpenReadStream(1024000).ReadAsync(bytes);
                var contentType = _pdfFile.ContentType;
                _fileUrl = $"data:{contentType};base64,{Convert.ToBase64String(bytes)}";
            }
            catch (IOException exception)
            {
                _sizeExceeded = true;
                Console.WriteLine(exception);
                var error = new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "Something went wrong", Detail = "Image file is too large", Duration = 4000};
                _notificationService.Notify(error);
            }
        }
    }
} 