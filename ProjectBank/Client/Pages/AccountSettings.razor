<!---- ROUTING ---->
@page "/account/settings"

<!---- USINGS ATTRIBUTES AND INJECTIONS  ---->
@inject NavigationManager uriHelper;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject HttpClient Http
@using Microsoft.AspNetCore.Authorization;
@using System.Security.Claims;
@using System.Net


@attribute [Authorize]

<PageTitle>Settings</PageTitle>

<h2>Profile:</h2>
<RadzenFieldset class="mb-4">
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Name:" />
        </div>
        <div class="col-md-9">
            <RadzenTextBox Disabled=true Placeholder=@name style="width: 50%;" Name="Name"/>
        </div>
    </div>
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Email:" />
        </div>
        <div class="col-md-9">
            <RadzenTextBox Disabled=true Placeholder=@email style="width: 50%;" Name="Email"/>
        </div>
    </div>
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Role:" />
        </div>
        <div class="col-md-9">
            <RadzenTextBox Disabled=true Placeholder=@currentRole style="width: 50%;" Name="Role"/>
        </div>
    </div>
</RadzenFieldset>

<h2>Projects created by you:</h2>
@if (userProjects.Count() >0)
{
    <table class="table table-striped" style="color: white">
        <thead>
        <tr>
            <th>Title</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var projects in userProjects)
        { 
            <tr style="color: white">
                <td>@projects.Title  </td>
                <td><RadzenButton style="width: 170px;height:30px;margin-left:80%" IsBusy=@busyProfile Click="@(e =>DeleteProject(projects.Id))" Text="Delete project"/></td>
            </tr>
        }
        </tbody>
    </table>
} else{
    <h3>You have made no projects yet.</h3>

    
}

    
@code {

    //VARIABLES
    private bool editing = true;
    private bool busyProfile;
    private string? name;
    private string? email;
    private string? currentRole;
    private string? token;

    ProjectDetailsDto[]? projects;
    private List<ProjectDetailsDto?> userProjects = new List<ProjectDetailsDto?>();
    
    //PAGE SCRIPTS
    private void Edit()
    {
        editing = !editing;
    }

   
    protected override async Task OnInitializedAsync(){
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        name = user.Identity?.Name;
        currentRole = user.FindFirst(c => c.Type.Contains("appRole"))?.Value;
        email = user.FindFirst(c => c.Type.Contains("preferred_username"))?.Value;
        token = user.FindFirst(c => c.Type.Contains("aud"))?.Value;

         projects = await Http.GetFromJsonAsync<ProjectDetailsDto[]>($"/api/Project");
               foreach (var project in projects)
        { if(project.AuthorToken==token){
            userProjects.Add(project);
        }
    }
    }
    private async Task DeleteProject(int id)
    {
        var response =  await Http.DeleteAsync($"/api/Project/{id}");
         busyProfile = false;
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }
  
    private async Task OnBusyClickProfile()
    {
        busyProfile = true;
        await Task.Delay(2000);
        UpdateProfile();
        busyProfile = false;
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    private void UpdateProfile()
    {
        //...
    }
}
