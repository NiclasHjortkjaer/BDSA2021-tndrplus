<!---- ROUTING ---->
@page "/account/settings"

<!---- USINGS ATTRIBUTES AND INJECTIONS  ---->
@inject NavigationManager uriHelper;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject HttpClient Http
@using Microsoft.AspNetCore.Authorization;
@using System.Security.Claims;
@using System.Net


@attribute [Authorize]

<PageTitle>Settings</PageTitle>

<h2>Profile:</h2>
<RadzenFieldset class="mb-4">
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Name:" />
        </div>
        <div class="col-md-9">
            <RadzenTextBox Disabled=true Placeholder=@name style="width: 50%;" Name="Name"/>
        </div>
    </div>
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Email:" />
        </div>
        <div class="col-md-9">
            <RadzenTextBox Disabled=true Placeholder=@email style="width: 50%;" Name="Email"/>
        </div>
    </div>
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Role:" />
        </div>
        <div class="col-md-9">
            <RadzenTextBox Disabled=true Placeholder=@currentRole style="width: 50%;" Name="Role"/>
        </div>
    </div>
</RadzenFieldset>

<RadzenButton Click=@Edit Text="Edit profile"/>
<RadzenButton style="width: 160px" IsBusy=@busyProfile Click=@OnBusyClickProfile Text="Save" />

<h2 style="padding-top: 2em">Profile picture:</h2>
<RadzenFieldset class="mb-4">
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Profile Picture:" />
        </div>
        <div class="col-md-9">
            @if (account.PictureUrl != null)
            {
                <img class="card-img-top" src=@account.PictureUrl alt="Project image" style="padding-bottom: 2em"/>
            }
        </div>
    </div>
</RadzenFieldset>

 <ImageUploader id=@account.Id isProject="false"></ImageUploader>
    
@code {

    //VARIABLES
    private bool editing = true;
    private bool busyProfile;
    
    private string? name;
    private string? email;
    private string? currentRole;
    private string? token;
    private AccountDetailsDto? account;
    
    //PAGE SCRIPTS
    private void Edit()
    {
        editing = !editing;
    }

   
    protected override async Task OnInitializedAsync(){
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        name = user.Identity?.Name;
        currentRole = user.FindFirst(c => c.Type.Contains("appRole"))?.Value;
        email = user.FindFirst(c => c.Type.Contains("preferred_username"))?.Value;
        token = user.FindFirst(c => c.Type.Contains("aud"))?.Value;
        try
        {
            account = await Http.GetFromJsonAsync<AccountDetailsDto>($"api/Account/{token}"); //Method does not exists!
        }
        catch(AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
  
    private async Task OnBusyClickProfile()
    {
        busyProfile = true;
        await Task.Delay(2000);
        UpdateProfile();
        busyProfile = false;
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    private void UpdateProfile()
    {
        //...
    }
}
