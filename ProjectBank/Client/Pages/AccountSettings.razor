<!---- ROUTING ---->
@page "/account/settings"

<!---- USINGS ATTRIBUTES AND INJECTIONS  ---->
@inject NavigationManager _uriHelper;
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject HttpClient _http


@attribute [Authorize]

<PageTitle>Settings</PageTitle>

<h2>Profile:</h2>
<RadzenFieldset class="mb-4">
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Name:"/>
        </div>
        <div class="col-md-9">
            <RadzenTextBox Disabled=true Placeholder=@_name style="width: 50%;" Name="Name"/>
        </div>
    </div>
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Email:"/>
        </div>
        <div class="col-md-9">
            <RadzenTextBox Disabled=true Placeholder=@_email style="width: 50%;" Name="Email"/>
        </div>
    </div>
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Role:"/>
        </div>
        <div class="col-md-9">
            <RadzenTextBox Disabled=true Placeholder=@_currentRole style="width: 50%;" Name="Role"/>
        </div>
    </div>
</RadzenFieldset>


<RadzenButton Click=@Edit Text="Edit profile"/>
<RadzenButton style="width: 160px" IsBusy=@_busyProfile Click=@OnBusyClickProfile Text="Save"/>

<h2 style="padding-top: 2em">Profile picture:</h2>
@if (_account != null)
{
    <RadzenFieldset class="mb-4">
        <div class="row">
            @if (_account?.PictureUrl != null)
            {
                <div style="justify-content: center; align-content: center">
                    <img class="card-img-top" size="60%" src=@_account?.PictureUrl alt="No Profile Picture" style="padding: 1em;justify-content: center; align-content: center "/>
                </div>
            }
        </div>
        @if (_account?.Id != null)
        {
            <div><ImageUploader Id="_account!.Id" IsProject="false"></ImageUploader></div>
        }
    </RadzenFieldset>
}


<h2 style="padding-top: 3em; padding-bottom: 1em">Projects created by you:</h2>
@if (_userProjects.Any())
{
    <table class="table table-striped" style="color: white">
        <thead>
        <tr>
            <th>Title</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var project in _userProjects)
        {
            <tr style="color: white">
                <td>@project?.Title </td>
                <td>
                    <RadzenButton style="width: 150px;height:30px;margin-left:80%" IsBusy=@_busyProfile Click="@(e => DeleteProject(project!.Id))" Text="Delete"/>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <h3>You have made no projects yet.</h3>
}



@code {

    //VARIABLES

    private bool _editing = true;
    private bool _busyProfile;

    private string? _name;
    private string? _email;
    private string? _currentRole;
    private string? _azureAdtoken;
    private AccountDetailsDto? _account;
    ProjectDetailsDto[]? _projects;
    private readonly List<ProjectDetailsDto?> _userProjects = new List<ProjectDetailsDto?>();


    //PAGE SCRIPTS
    private void Edit()
    {
        _editing = !_editing;
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        _name = user.Identity?.Name;
        _currentRole = user.FindFirst(c => c.Type.Contains("appRole"))?.Value;
        _email = user.FindFirst(c => c.Type.Contains("preferred_username"))?.Value;
        _azureAdtoken = user.FindFirst(c => c.Type.Contains("aud"))?.Value;
        _account = await _http.GetFromJsonAsync<AccountDetailsDto>($"api/Account/{_azureAdtoken}");
        _projects = await _http.GetFromJsonAsync<ProjectDetailsDto[]>($"/api/Project");
        if (_projects != null)
            foreach (var project in _projects)
            {
                if (project.AuthorToken == _azureAdtoken)
                {
                    _userProjects.Add(project);
                }
            }
    }

    private async Task DeleteProject(int id)
    {
        var response = await _http.DeleteAsync($"/api/Project/{id}");
        Console.WriteLine(response.StatusCode);
        _busyProfile = false;
        _uriHelper.NavigateTo(_uriHelper.Uri, forceLoad: true);
    }

    private async Task OnBusyClickProfile()
    {
        _busyProfile = true;
        await Task.Delay(2000);
        UpdateProfile();
        _busyProfile = false;
        _uriHelper.NavigateTo(_uriHelper.Uri, forceLoad: true);
    }

    private void UpdateProfile()
    {
    //...
    }
}