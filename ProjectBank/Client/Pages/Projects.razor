@page "/projects/{Id}"
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject DialogService DialogService
@inject NotificationService _notificationService;
@inject NavigationManager _uriHelper;
<RadzenDialog />
<RadzenNotification/>
@if (_project == null)
{
    <p><em>Nothing to see here.</em></p>
}
else
{
<div class="row my-4">
        <RadzenCard class="m-6">
            <h3 class="h5" style="color:black;">Projects title: @_project?.Title":</h3>
            <h4 style="color:black;">Authored by: @_project?.AuthorName 
                 <h5 style="color:black;"> (Role: @_role) </h5>
            </h4>
            <div class="d-flex flex-row">
                <div>
                    <b style="color:black;">Project description:</b>
                    <div style="color:black;">@(_project?.Description)</div>
                    @if (_project?.ImageUrl != null)
                    {
                        <div><img class="card-img-top" src=@_project.ImageUrl alt="Project image"></div>
                    }
                    <b style="color:black;">Degree:</b>
                    <div style="color:black;">@(_project?.Degree)</div>
                    <b style="color:black;">ECTS:</b>
                    <div style="color:black;">@(_project?.Ects)</div>
                    <b style="color:black;">Last updated:</b>
                    <div style="color:black;">@(_project?.LastUpdated)</div>
                    <b style="color:black;">Tags:</b>
                    <div style="color:black;">@if (_project != null){foreach (var keyword in _project.Keywords)
                    {
                        <div>@keyword</div>
                    }}
                        <div style="color:blue;">
                            @if (_project?.FileUrl != null)
                            {
                                <a href="@_project.FileUrl" download="@_project.Title??.pdf">@_project.Title .pdf</a>
                            }
                   <h4 style="color:black;">______________________________</h4> 
                        </div>
                        
                        <RadzenButton style="width: 160px" Icon="favorite" BusyText="Saving ..." Text="Apply" Click="@(args => ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Applied", Detail = "placeholder", Duration = 4000 }))" />
                         <RadzenButton style="width: 250px" Icon="accessibility" BusyText="Saving ..." Text="Contact Author" Click=@ShowCloseableFromOverlayDialog  />

                    </div>
                </div>
            </div>
            
        </RadzenCard>
    </div>
}

@code {
    [Parameter]
    public string? Id { get; set; }
    private string? _role;
    private ProjectDetailsDto? _project;

protected override void OnInitialized()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
        
    }
    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
       
    }
    void Close(dynamic result)
    {
       NotificationMessage success = new NotificationMessage {Severity = NotificationSeverity.Success, Summary = "Message send", Detail = "", Duration = 4000};
            _notificationService.Notify(success);
    }

    // <div class="col-lg-6 col-xl-4 offset-lg-3 offset-xl-4"></div>
      void ShowNotification(NotificationMessage message)
    {
        _notificationService.Notify(message);

       
    }
     protected override async Task OnParametersSetAsync()
    {
        try {
            _project = await Http.GetFromJsonAsync<ProjectDetailsDto>("/api/Project/"+Id);
        } catch {
          
            _project = null;
        }
          if(_project.AuthorName.Length >15){
                    _role = "Student";
            } else{
                _role = "Supervisor";
            }
    }
   
     async Task ShowCloseableFromOverlayDialog()
    {
         var _email =_project.AuthorName.ToString()+".gmail.com";
         _email =_email.Replace(" ", String.Empty);
     await DialogService.OpenAsync("", ds =>
        @<div style="color:black;">
            <div>
            <h2 style="color:black;">Author Information</h2> </div>
            <div>
        Name: @_project.AuthorName</div> 
        <div> 
        Email: @_email</div>
        <div>
          <RadzenTextArea Placeholder="Write message" Style="height:75px;width:100px"/>
          <div>
          <RadzenButton style="width: 75px;" BusyText="Saving ..." Text="Send" Click="() => ds.Close(true)"/>
</div>
        </div>
    
        </div>, new DialogOptions() { CloseDialogOnOverlayClick = true });
    }
  

}