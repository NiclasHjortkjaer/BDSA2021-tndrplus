@page "/projects/{Id}"
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject DialogService _dialogService
@inject NotificationService _notificationService;
@inject NavigationManager _uriHelper;
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ProjectStateChanged _projectChanged;

<RadzenDialog />
<RadzenNotification/>
@if (_project == null)
{
    <p><em>Nothing to see here.</em></p>
}
else
{
    <RadzenFieldset class="mb-4" Style="border: none">  
    <div class="row my-4">
    <div class="project_card_content">
                <div class="radzen_card_projects">
                    <div class="like_star">
                        @if (_likedProjects.Contains(_project.Title))
                        {
                            <input type="checkbox" class="star_checkbox" id="star_checkbox_@_project.Id" checked="checked" @onchange="() => AddOrRemoveFavorite(_project.Title)"/>
                            <label class="oi oi-star" id="star_@_project.Id" for="star_checkbox_@_project.Id"></label>
                        }
                        else
                        {
                            <input type="checkbox" class="star_checkbox" style="color: #1a1e21" id="star_checkbox_@_project.Id" unchecked="true" @onchange="() => AddOrRemoveFavorite(_project.Title)"/>
                            <label class="oi oi-star" id="star_@_project.Id" for="star_checkbox_@_project.Id"></label>
                        }
                    </div>
                    <h3 class="h6" style="color:black;">Project title: "@_project?.Title":</h3>
                    <h6 style="color:black;">Authored by: <x onclick="@(() => _navigationManager.NavigateTo($"/user/{_project?.AuthorName}"))" style="cursor: pointer;">@_project?.AuthorName</x>
                        <br><h7 style="color:black;"> (Role: @_role) </h7>
                    </h6>
                    <div class="d-flex flex-row">
                        <div>
                            <b style="color:black;">Project description:</b>
                            <div style="color:black;">
                                @(_project?.Description)
                            </div>
                            @if (_project?.ImageUrl != null)
                            {
                                <div><img class="card-img-top" style="width: 63%" src=@_project.ImageUrl alt="Project image"></div>
                            }
                            <b style="color:black;">Degree:</b>
                            <div style="color:black;">@(_project?.Degree)</div>
                            <b style="color:black;">ECTS:</b>
                            <div style="color:black;">@(_project?.Ects)</div>
                            <b style="color:black;">Last updated:</b>
                            @if (_lastUpdated.Days > 0){<div style="color:black;">@(_lastUpdated.Days) day(s) ago</div>}else if (_lastUpdated.Hours > 0){<div style="color:black;">@(_lastUpdated.Hours) hour(s) ago</div>}else if (_lastUpdated.Minutes > 0){<div style="color:black;">@(_lastUpdated.Minutes) minute(s) ago</div>}else{<div style="color:black;">@(_lastUpdated.Seconds) seconds ago</div>}
                            <b style="color:black;">Tags:</b>
                            <div style="color:black;">@if (_project != null){foreach (var keyword in _project.Keywords)
                                                      {
                                                          <div>@keyword</div>
                                                      }}
                                <div style="color:blue;">
                                    @if (_project?.FileUrl != null)
                                    {
                                        <a href="@_project.FileUrl" download="@_project.Title??.pdf">@_project.Title .pdf</a>
                                    }
                                </div> 
                            </div>
                            <br>
                            <div style="color: black; display: flex; justify-items: center; justify-content: center; width: 99%;">
                                <h3 style="display: flex">_____________</h3>
                            </div>                                <br>
                                <div style="display: flex; justify-items: center; justify-content: center" >
                                    @if (_project?.AuthorName == _name){
                                        <RadzenButton style="width: 250px; background: linear-gradient(10deg, #fd297b, #ff655b)" Icon="accessibility" BusyText="Saving ..." Text="Share project idea" Click=@ShowCloseableFromOverlayDialogRequest/>
                                    } else {
                                        <div style="display: grid; grid-template-columns: 50% 50%">
                                            <RadzenButton style="width: 7em; background: linear-gradient(10deg, #fd297b, #ff655b); margin-right: 1em;" BusyText="Saving ..." Text="Apply" Click="@(_ => ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Applied", Detail = "placeholder", Duration = 4000 }))" />  
                                            <RadzenButton style="width: 7em; background: linear-gradient(10deg, #fd297b, #ff655b)" BusyText="Saving ..." Text="Contact" Click=@ShowCloseableFromOverlayDialogContact />
                                        </div>
                                    }
                                </div>
                            <br/>
                        </div>
                    </div>
                </div>
            </div>
    </div>
</RadzenFieldset>
}

@code {

    [Parameter]
    public string? Id { get; set; }

    private string? _role;
    private ProjectDetailsDto? _project;
    private List<string> _likedProjects = null!;
    private string? _aToken;
    private TimeSpan _lastUpdated;
    private string? _name;

    protected override void OnInitialized()
    {
        _dialogService.OnOpen += Open;
        _dialogService.OnClose += Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {

    }

    void Close(dynamic result)
    {
    // NotificationMessage success = new NotificationMessage {Severity = NotificationSeverity.Success, Summary = "Message send", Detail = "", Duration = 4000};
    //    _notificationService.Notify(success);
    }

    void ShowNotification(NotificationMessage message)
    {
        _notificationService.Notify(message);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var _user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
            {
                _name = _user.Identity?.Name;
                _aToken = _user.FindFirst(c => c.Type.Contains("aud"))?.Value;
                var account = await _http.GetFromJsonAsync<AccountDetailsDto>($"/api/Account/{_aToken}");
                if (account != null)
                {
                    _likedProjects = account.SavedProjects.ToList();
                }
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _project = await _http.GetFromJsonAsync<ProjectDetailsDto>("/api/Project/" + Id);
            if (_project != null) _lastUpdated = DateTime.UtcNow - _project.LastUpdated;
        }
        catch
        {
            _project = null;
        }
        _role = _project!.AuthorName!.Length > 15 ? "Student" : "Supervisor";
    }

    async Task ShowCloseableFromOverlayDialogContact()
    {
        var email = _project?.AuthorName + "@gmail.com";
        email = email.Replace(" ", String.Empty);
        await _dialogService.OpenAsync("", ds =>
            @<div style="color:black;">
                <div>
                    <h2 style="color:black;">Author Information</h2> </div>
                <div>
                    Name: @_project?.AuthorName</div>
                <div>
                    Email: @email</div>
                <div>
                    <RadzenTextArea Placeholder="Write message" Style="height:75px;width:300px"/>
                    <div>
                        <RadzenButton BusyText="Saving ..." Text="Send" Click="@(_ => ShowNotification(new NotificationMessage() {Severity = NotificationSeverity.Success, Summary = "Applied", Detail = "", Duration = 4000}))"/>
                        <RadzenButton BusyText="Saving ..." Text="Close" Click="() => ds.Close(true)"/>
                    </div>
                </div>
            </div>, new DialogOptions() {CloseDialogOnOverlayClick = true});
    }

    async Task ShowCloseableFromOverlayDialogRequest()
    {
        await _dialogService.OpenAsync("", ds =>
            @<div style="color:black;">
                <div>
                    <h2 style="color:black;">Request supervision</h2> </div>
                <div>
                    Enter email: </div>
                <div>
                    <RadzenTextArea Placeholder="Enter email" Style="height:37px;width:400px"/>
                    <div>
                        <RadzenButton style="width: 100px;" BusyText="Saving ..." Text="Send" Click="@(_ => ShowNotification(new NotificationMessage() {Severity = NotificationSeverity.Success, Summary = "Request send", Detail = "", Duration = 4000}))"/>
                        <RadzenButton style="width: 100px;" BusyText="Saving ..." Text="Close" Click="() => ds.Close(true)"/>
                    </div>
                </div>
            </div>, new DialogOptions() {CloseDialogOnOverlayClick = true});
    }

    private async Task AddOrRemoveFavorite(string t)
    {
        if (_likedProjects.Contains(t))
        {
            await _http.PutAsJsonAsync($"api/Account/{_aToken}/remove", t);
            _projectChanged.RemoveSavedProjects(t);
            _likedProjects.Remove(t);
        }
        else
        {
            await _http.PostAsJsonAsync($"api/Account/{_aToken}", t);
            _projectChanged.AddSavedProjects(t);
            _likedProjects.Add(t);
        }
    }
}