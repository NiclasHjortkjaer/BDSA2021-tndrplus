@page "/createproject"
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject NotificationService _notificationService;

<PageTitle>ProjectBank - CreateProject</PageTitle>
<RadzenNotification/>
<h3 id="create" style="text-decoration: underline; text-align: center">Create a new project idea:</h3>

<RadzenFieldset class="mb-4" Style="border: none;">
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Title:" Style="text-decoration: underline"/>
        </div>
        
        <div class="col-md-9" style="width: 100%">
            <RadzenTextBox id="title_area" MaxLength=100 Disabled=false Placeholder="Choose a title" @bind-Value="_project.Title" Change=@(args => OnChange(args, "TextArea with placeholder")) Style="width: 100%" Name="ProjectName"/>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Description:" Style="text-decoration: underline"/>
        </div>
        <div class="col-md-9" style="width: 100%">
            <RadzenTextArea MaxLength=500 Placeholder="Enter here..." @bind-Value="_project.Description" Change=@(args => OnChange(args, "TextArea with placeholder")) Style="height:20em; resize: none;" Class="w-100"/>
        </div>
    </div>
    <br>
    <div class="grid-container_create_project">
        <div class="row">
            <div class="align-items-center d-flex col-md-3">
                <RadzenLabel Text="Degree:" Style="text-decoration: underline"/>
            </div>
            <div class="col-md-9" style="width: 90%;">
                <RadzenDropDown AllowClear="true" Item="enums" T="enums" Class="w-100" @bind-Value="_project.Degree" Data="_enums"/>
            </div>
        </div>
        <div class="row">
            <div class="align-item-center d-flex col-md-3">
                <RadzenLabel Text="ETCs:" Style="text-decoration: underline"/>
            </div>
            <div class="col-md-9" style="width: 90%">
                <RadzenDropDown AllowClear="true" TValue="float?" Class="w-100" @bind-Value="_project.Ects"
                                Data="_etcs"/>
            </div>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="align-item-center d-flex col-md-3">
            <RadzenLabel Text="Keywords:" Style="text-decoration: underline"/>
        </div>
        <div class="col-md-9" style="width: 100%" >
            <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@_multipleValues Multiple="true" Data=@_keywords
                           Style="height:200px;color:black;" Class="w-100"/>
        </div>
    </div>
    <br>
    <div style="display: flex; justify-content: center; justify-items: center;">
        <RadzenButton style="width: 8em; background: linear-gradient(10deg, #fd297b, #ff655b);" BusyText="Saving ..." IsBusy=@_busy Click=@CreatesProject Text="Create"/>
    </div> 
</RadzenFieldset>


@code {
    private string? _name;
    private string? _token;
    bool _busy;
    private ProjectCreateDto _project = new();
    private IEnumerable<string> _multipleValues = new[] {"AI"};
    private List<string> _keywords = new();
    Enum[] _enums = {Degree.Bachelor, Degree.Master, Degree.PHD};
    float[] _etcs = {7.5f, 15f};

    protected override async Task OnInitializedAsync()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            _name = user.Identity?.Name;
            _token = user.FindFirst(c => c.Type.Contains("aud"))?.Value;

            try
            {
                var dtoKeywords = await _http.GetFromJsonAsync<KeywordDto[]>("/api/Keyword");
                if (dtoKeywords != null)
                    foreach (var keyword in dtoKeywords)
                    {
                        _keywords.Add(keyword.Word);
                    }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }

    private async Task CreatesProject()
    {
        _busy = true;

        _project.AuthorName = _name;
        _project.AuthorToken = _token;
        _project.LastUpdated = DateTime.UtcNow;
        ISet<string> keySet = new HashSet<string>();
        foreach (var keyword in _multipleValues)
        {
            keySet.Add(keyword);
        }
        _project.Keywords = keySet;

        if (_project.AuthorName == null || _project.AuthorToken == null)
        {
            var error = new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "Something wrong with authentication right now", Detail = "", Duration = 4000};
            _notificationService.Notify(error);
        }
        else if (_project.Title.Length < 1)
        {
            var error = new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "Title cannot be left empty", Detail = "Fix please", Duration = 4000};
            _notificationService.Notify(error);
        }
        else if (_project.Keywords.Count == 0)
        {
            var error = new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "You must choose at least 1 keyword", Detail = "Fix please", Duration = 4000};
            _notificationService.Notify(error);
        }
        else
        {
            if (_project.Description is {Length: < 1 })
            {
                var info = new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "You have no description", Detail = "", Duration = 4000};
                _notificationService.Notify(info);
            }
            if (_project.Degree == null)
            {
                var info = new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "You have chosen no degree", Detail = "", Duration = 4000};
                _notificationService.Notify(info);
            }
            if (_project.Ects == null)
            {
                var info = new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "You have chosen no ETCs", Detail = "", Duration = 4000};
                _notificationService.Notify(info);
            }

            try
            {
                var response = await _http.PostAsJsonAsync("api/Project", _project);
                var created = await response.Content.ReadFromJsonAsync<ProjectDetailsDto>();

                if (response.IsSuccessStatusCode)
                {
                    var success = new NotificationMessage {Severity = NotificationSeverity.Success, Summary = "Success creating project!", Detail = "Now in database", Duration = 4000};
                    _notificationService.Notify(success);
                    await Task.Delay(2000);
                    _navigationManager.NavigateTo($"/createproject/AdditionalProjectSetup/{created!.Id}");
                }
                else
                {
                    var error = new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "Something went wrong", Detail = "Project not saved", Duration = 4000};
                    _notificationService.Notify(error);
                    
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
        _busy = false;
    }

    void OnChange(string value, string name)
    {
    }
}