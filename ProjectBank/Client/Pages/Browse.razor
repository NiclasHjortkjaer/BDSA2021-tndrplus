@page "/browse"
@inject HttpClient Http
@inject NavigationManager navigationManager

<PageTitle>ProjectBank - Browse</PageTitle>

<div class="browse_all">
    <button class="browse_all_btn" @onclick="(() => RedirectToSwipeAllPage())"> Browse all </button><p1 id="Browse_all_text" >or look for a specific keyword to browse:</p1>
</div>

<div class="filter_browse">
    <button class="mobile_filter_btn" @onclick="Dropdown">Filter</button>
    <div class="desktop_filter_btn">
    @if (!_isDropedDown)
    {
        <button @onclick="Dropdown" style="background: none; border: none;">
            <img src="filter.png" alt="" style="height: 20px"/>
        </button>
    }
    @if (_isDropedDown)
    {
        <button @onclick="Dropdown" style="background: #ffffff; border: none; border-top-left-radius: 10px; border-top-right-radius: 10px">
            <img src="filterBlack.png" alt="" style="height: 20px"/>
        </button>
    }
    </div>
</div>
@if (_isDropedDown)
{
    <div class="align-right">
        <div class="dropdown_menu_filter_browse">
            <div class="drop_filter_content_browse">
                @*
                    The Editform as well as the InputRadioGroup and the DegreeModel.cs and DegreeOptions.cs are inspired by the code
                    from the microsoft docs.
                    https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation?view=aspnetcore-3.1#radio-buttons
                
                *@
                <EditForm EditContext="this._editContext">
                    <p1 style="text-decoration: underline; font-weight: bold;">
                        @_model.Value:
                    </p1>
                   
                        <InputRadioGroup @bind-Value="_model.Selected">
                            @foreach (var option in _model.Options)
                                {
                                <div class="btn_filter">
                                    <InputRadio  Value="option.Value" id="@option.Value" style="outline: none; border: none; margin-left: 2px;"/> 
                                        <label for="@option.Value" style="cursor: pointer">@option.Value</label>
                                </div>
                            }
                        </InputRadioGroup>
                    
                </EditForm>
            </div>
        </div>
    </div>
}

@if (_keywords == null)
    {
        <div id="app">
            <div class="centered">
                <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>
        </div>
    }else{
        <div class="grid-container">
            @foreach (var keyword in _keywords)
            {
                <button class="grid-item" @onclick="(() => RedirectToSwipePage(keyword.Word))">@keyword.Word</button>
            }

        </div>
    }
<br>

@code{
    private KeywordDto[]? _keywords;

    private EditContext _editContext;
    private DegreeModel _model;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _keywords = await Http.GetFromJsonAsync<KeywordDto[]?>("/api/Keyword");
            _model = new DegreeModel() { Value = "Degrees" };
            _editContext = new EditContext(_model);
        }
        catch(AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    
    private void RedirectToSwipePage(string keyword)
    {
        navigationManager.NavigateTo($"swipe/{keyword}/{(int) _model.Selected}");
    }
    private void RedirectToSwipeAllPage()
    {
        navigationManager.NavigateTo($"swipe/all/{(int) _model.Selected}");
    }


    private bool _isDropedDown;

    private void Dropdown()
    {
        _isDropedDown = !_isDropedDown;
    }
}
