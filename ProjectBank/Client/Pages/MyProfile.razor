<!---- ROUTING ---->
@page "/account/myprofile"

<!---- USINGS ATTRIBUTES AND INJECTIONS  ---->
@inject NavigationManager _uriHelper
@inject AuthenticationStateProvider _authenticationStateProvider
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService

@attribute [Authorize]

<RadzenNotification/>

<PageTitle>ProjectBank - My Profile</PageTitle>

<h3 id="profile_h3" style="text-decoration: underline">Profile:</h3>
@if (_account != null)
{
    <div class="profile_info">
        <div class="picture_container">
            <ProfilePicture Id="_account!.Id"></ProfilePicture>
        </div>
        <div class="profile_contact_info">
            <span class="profile_name">Name: @_account?.Name</span>
            <br/>
            <span class="profile_email">Email: @_email</span>
            <br/>
            <span class="profile_role">Role: @_currentRole</span>
        </div>
        <br/>
    </div>
}
<hr id="MyProfile_line">
<h3 id="myproject_h3" style="text-decoration: underline">My project ideas :</h3>
@if (_userProjects.Any())
{
    <table class="table table-striped" style="color: white; display: flow">
        <thead>
        <tr>
            <th id="myprojects_table_title">Title:</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var project in _userProjects)
        {
            <tr style="color: white">
                <td><x id="MyProject_title" onclick="@(() => _navigationManager.NavigateTo($"/projects/{project?.Id}"))" style="cursor: pointer;">@project?.Title</x></td>
                <td>
                    <div class="my_project_options">
                        <button id="edit_my_project" style="display: none;"
                                @onclick="_ => UpdateProject(project!.Id)"></button>
                        <label for="edit_my_project" class="oi oi-pencil" style="cursor: pointer;"></label>
                        <button id="delete_My_project" style="display: none;" IsBusy=@_busyProfile
                                @onclick="(_ => DeleteProject(project!.Id))"></button>
                        <label for="delete_My_project" class="oi oi-trash" style="cursor: pointer;"></label>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <h3>You have made no projects yet.</h3>
}

<div class="mobile_view_favorites">
    <br/>
    <hr>
    <br/>
<h3 id="myproject_h3" style="text-decoration: underline">Liked projects:</h3>
    @if (_account?.SavedProjects == null || _account?.SavedProjects.Count == 0)
    {
        <h3>No liked projects yet!</h3>
    }
    else
    {
        <table class="table table-striped" style="color: white; display: flow">
            <thead>
            <tr>
                <th id="myprojects_table_title">Title:</th>
            </tr>
            </thead>
            <tbody>
            @if (_account?.SavedProjects != null)
            {
                foreach (var project in _account?.SavedProjects!)
                {
                    <tr style="color: white">
                        <td>
                            <x id="MyProject_title">@project</x>
                        </td>
                        <td>
                            <div class="my_project_options">
                                <button id="mobile_favorite_btn" onclick="@(() => NavigateToFavorite(project))"> Go to project</button>
                            </div>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>

    }
    <br>
    <hr>
    <br>
    <div style="display: flex; justify-content: center; justify-items: center; ">
        <LoginDisplay IsMobile="true"></LoginDisplay>
    </div>
</div>
          
@code {
    //VARIABLES
    private bool _busyProfile = false;
    private string? _email;
    private string? _currentRole;
    private string? _azureAdtoken;
    private AccountDetailsDto? _account;
    ProjectDetailsDto[]? _projects;
    private readonly List<ProjectDetailsDto?> _userProjects = new List<ProjectDetailsDto?>();

    //PAGE SCRIPTS
    protected override async Task OnInitializedAsync()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        _currentRole = user.FindFirst(c => c.Type.Contains("appRole"))?.Value;
        _email = user.FindFirst(c => c.Type.Contains("preferred_username"))?.Value;
        _azureAdtoken = user.FindFirst(c => c.Type.Contains("aud"))?.Value;
        _account = await _http.GetFromJsonAsync<AccountDetailsDto>($"api/Account/{_azureAdtoken}");
        _projects = await _http.GetFromJsonAsync<ProjectDetailsDto[]>($"/api/Project");
        if (_projects != null)
            foreach (var project in _projects)
            {
                if (project.AuthorToken == _azureAdtoken)
                {
                    _userProjects.Add(project);
                }
            }
    }

    private async Task DeleteProject(int id)
    {
        var response = await _http.DeleteAsync($"/api/Project/{id}");
        Console.WriteLine(response.StatusCode);
        var itemToRemove = _userProjects.FirstOrDefault(p => p!.Id == id);
        _userProjects.Remove(itemToRemove);
        _notificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Success, Summary = "Success", Detail = "The project was successfully removed from the database", Duration = 2000});
    }

    private void UpdateProject(int id)
    {
        _navigationManager.NavigateTo($"/editproject/{id}");
    }

    private async Task NavigateToFavorite(string favorite)
    {
        var project = await _http.GetFromJsonAsync<IReadOnlyCollection<ProjectDetailsDto>>("/api/Project/"+favorite);
        if (project != null)
        {
            _navigationManager.NavigateTo("/projects/" + project.ElementAt(0).Id);
        }
    }
}