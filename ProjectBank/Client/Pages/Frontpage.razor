@page "/"
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject HttpClient _http

<AuthorizeView>
    <NotAuthorized>
        <h1>Welcome to the ProjectBank! </h1>
        <h3>You are currently not logged in and can therefore not access the rest of the ProjectBank. 
            Please press "Log in" <span id="mobile_view_txt">in the top-right corner and log in with your Microsoft Account.</span></h3>
    </NotAuthorized>
    <Authorized>
        <h1>Hello and Welcome, @context.User.Identity?.Name!</h1>
        <h3>You are now signed in as and can use the ProjectBank. </h3>
        @if (_newUser){
            <h4>We can see this is your first time using the ProjectBank! A profile has been setup based on your Microsoft credentials!</h4>
        }
    </Authorized>
</AuthorizeView>
 <br>
  <div class="mobile_view_frontpage">
      <button style="border: none; border-radius: 5px;">
                <LoginDisplay IsMobile="true"></LoginDisplay>
            </button>
  </div>

@code{
    private string? _name;
    private string? _currentRole;
    private string? _token;
    private bool _newUser;

    protected override async Task OnInitializedAsync(){
        try {
            var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (user.Identity is {IsAuthenticated: true })
        {   
            _name = user.Identity?.Name;
            _currentRole = user.FindFirst(c => c.Type.Contains("appRole"))?.Value;
            _token = user.FindFirst(c => c.Type.Contains("aud"))?.Value;
            var accountCheck = await _http.GetFromJsonAsync<AccountDetailsDto>("api/Account/"+_token);
        }
        } catch {//TaskCancelException
        }
    }
}