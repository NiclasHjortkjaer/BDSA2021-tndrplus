@page "/swipe/{keyword}"
@inject HttpClient Http
@using Radzen.Blazor.Rendering
@using System.Security.Principal
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<button id="GoBack_btn" onclick="location.href='/browse'">
    <label class="oi oi-arrow-circle-left"></label>
</button>
<button id="info_btn" 
        onclick="window.alert('Swipe Use-guide: \r\n \r\n ' +
         'To Like a project; you must either swipe the project right or click the star. \r\n \r\n ' +
          'To skip a project; you must swipe the project left or click the`X` \r\n \r\n' +
          'To regret/undo a decision; you can click the button in the middle, displayed with a circled arrow.')">i
</button>
@*<input id="slider" type="range" min="1" max="100" value="50" onchange=""/>*@

<div class="outer_box">

    @if (_projects == null)
        {
            <h1>no project to show on keyword: @keyword</h1>
        }
    else
    {
        <h1>no project to show on title: @_projects.First().Title</h1>
        @*foreach (var project in _projects)
      {
       
              <div class="project_builder" id="p_@_idCounter" style="z-index: @_i;">
                  <div class="project_content">
                      <div id="project_title">Title: @project.Title </div>
                      <div id="supervisor">by: <x onclick="">Supervisor</x></div>
                      <br/>
                      <hr/>
                      <br/>
                      <textarea class="project_description" readonly="readonly">blah blah blah....</textarea>
                      <br/>
                      <hr/>
                      <br/>
                      <textarea class="project_keywords" readonly="readonly">#something, ..., .., ..., ...., #Keyword</textarea>
                  </div>
              </div>
              _i += 10;
              _idCounter += 1;
          }  *@
    }
  

</div>
<div class="like_and_dislike_btn_div">
    <button id="dislike_btn" @onclick="(() => CheckClick(ClickType.Dislike))">
        <label id="x_icon" class="oi oi-x"></label>
    </button>
    <button id="re-watch_btn" @onclick="(() => CheckClick(ClickType.Rewatch))">
        <label id="re-watch_icon" class="oi oi-action-undo"></label>
    </button>
    <button id="like_btn" @onclick="(() => CheckClick(ClickType.Like))">
        <label id="star_icon" class="oi oi-star"></label>
    </button>
</div>

@code
{
    [Parameter]
    public string keyword { get; set; }

    //private string[]? _Test = {"Project1", "Project2", "Project3"};
    
    private int _i = 0;

    private int _idCounter = 1;

    private ProjectDto[]? _projects;
    
    private enum ClickType
    {
        Like,
        Dislike,
        Rewatch
    }
    

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _projects = await Http.GetFromJsonAsync<ProjectDto[]>($"/api/Keyword/{keyword}");
            //await Http.GetFromJsonAsync<List<ProjectDto>>($"/api/Project");
        }
        catch (AccessTokenNotAvailableException e)
        {
            e.Redirect();
        }

    }

    private void CheckClick(ClickType s)
    {
        if (s == ClickType.Like)
        {
            
        }
        if (s == ClickType.Rewatch)
        {
            
        }
    }
}


@*<div class="like_star">
                    <input type="checkbox" id="star_checkbox" unchecked="true" onchange=""/>
                    <label class="oi oi-star" id="star" for="star_checkbox"></label>
                </div>*@