@page "/swipe/{keyword}"
@inject HttpClient Http
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider;


<button id="GoBack_btn" onclick="location.href='/browse'">
    <label class="oi oi-arrow-circle-left"></label>
</button>
<button id="info_btn" 
        onclick="window.alert('Swipe Use-guide: \r\n \r\n ' +
         'To Like a project; you must either swipe the project right or click the star. \r\n \r\n ' +
          'To skip a project; you must swipe the project left or click the`X` \r\n \r\n' +
          'To regret/undo a decision; you can click the button in the middle, displayed with a circled arrow.')">i
</button>
@*<input id="slider" type="range" min="1" max="100" value="50" onchange=""/>*@


@if (_projects == null)
{
    <h1>no project to show on keyword: @keyword</h1>
}
else
{
    <div class="outer_box">
        <div class="project_builder" id="p_@_idCounter" style="z-index: @_i;">
            <div class="project_content">
                <div id="project_title">Title: @_currentProject.Title </div>
                <div id="supervisor">by: <x onclick=""> Supervisor</x></div>
                <br/>
                <hr/>
                <br/>
                <textarea class="project_description" readonly="readonly">@_currentProject.Description</textarea>
                @*<img class="card-img-top" src=@_currentProject.ImageUrl alt = "Project image">*@
                <br/>
                <hr/>
                <br/>
                <textarea class="project_keywords" readonly="readonly">Keywords: @_keywordString</textarea>
            </div>
        </div>
    </div>
    
        <div class="like_and_dislike_btn_div">
            <button id="dislike_btn" @onclick="(() => CheckClick(ClickType.Dislike))">
                <label id="x_icon" class="oi oi-x"></label>
            </button>
            <button id="re-watch_btn" @onclick="(() => CheckClick(ClickType.Rewatch))">
                <label id="re-watch_icon" class="oi oi-action-undo"></label>
            </button>
            <button id="like_btn" @onclick="(() => CheckClick(ClickType.Like))">
                <label id="star_icon" class="oi oi-star"></label>
            </button>
        </div>
       
}


@code
{
    [Parameter]
    public string? keyword { get; set; }

    private int _i = 10;

    private int _idCounter = 0;

    private ProjectDetailsDto[] _projects = null!;

    private List<ProjectDetailsDto> _likedProjects = null!;

    private ProjectDetailsDto _currentProject = null!;
    private ClaimsPrincipal? _user;
    private IEnumerable<Claim>? _claims;
    private string? _aToken;

    private string? _keywordString;
    

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var projects = await Http.GetFromJsonAsync<ProjectDetailsDto[]>($"/api/Keyword/{keyword}");
            if (projects != null) _projects = projects;
            _likedProjects = new List<ProjectDetailsDto>();
            _user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
            _claims = _user.Claims;
            _aToken = _user.FindFirst(c => c.Type.Contains("aud"))?.Value;
            if (_projects != null)
            {
                _currentProject = _projects.First();
                _keywordString = getKeyWords();
            }
        }
        catch (AccessTokenNotAvailableException e)
        {
            e.Redirect();
        }

    }
    
    private enum ClickType
    {
        Like,
        Dislike,
        Rewatch
    }

    private async void CheckClick(ClickType s)
    {
        if (s == ClickType.Like)
        {
            if (!_likedProjects.Contains(_currentProject))
            {
                _likedProjects.Add(_currentProject);
                await Http.PostAsJsonAsync($"api/Account/{_aToken}",_currentProject );
                //så kan vi måske lave en if(response ==....) så vise noget forskelligt, hvis den nu ik kan finde projektet i databasen eller whatever.
            }
            _idCounter++;
            _currentProject = _projects[(_idCounter) % _projects.Length];
        }
        if (s == ClickType.Rewatch)
        {
            if (_likedProjects.Contains(_currentProject))
            {
                _likedProjects.Remove(_currentProject);
            }
            if (_idCounter != 0)
            {
                _idCounter--;
            }
            
            _currentProject = _projects[(_idCounter) % _projects.Length];
        }
        if (s == ClickType.Dislike)
        {
            _idCounter++;
            _currentProject = _projects[(_idCounter) % _projects.Length];
            
        }
        _keywordString = getKeyWords();
        await InvokeAsync(StateHasChanged);
    }


    private string getKeyWords()
    {

        var keywords = string.Join(", ", _currentProject.Keywords);

        return keywords;
    }
}
    
