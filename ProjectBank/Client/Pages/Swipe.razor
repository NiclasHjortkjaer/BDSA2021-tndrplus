@page "/swipe/{keyword}/{degreeInt:int}"
@inject HttpClient Http
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProjectStateChanged projectChanged
@inject NotificationService notificationService
@inject NavigationManager _navigationManager

<RadzenNotification/>


<button id="GoBack_btn" onclick="location.href='/browse'">
    <label class="oi oi-arrow-circle-left"></label>
</button>
<button id="info_btn" 
        onclick="window.alert('Swipe Use-guide: \r\n \r\n ' +
         'To Like a project; you must either swipe the project right or click the star. \r\n \r\n ' +
          'To skip a project; you must swipe the project left or click the`X` \r\n \r\n' +
          'To regret/undo a decision; you can click the button in the middle, displayed with a circled arrow.')">i
</button>
@*<input id="slider" type="range" min="1" max="100" value="50" onchange=""/>*@


@if (!_seenProjectIds.Any())
{
    <h1>no project to show on keyword: @keyword</h1>
}
else
{
    <div class="outer_box">
        <div class="project_builder" id="p_@_indexCounter" style="z-index: @_i;">
            <div class="project_content">
                <div id="project_title">Title: <x onclick="@(() => _navigationManager.NavigateTo($"/projects/{_currentProject.Id}"))" style="cursor: pointer;">@_currentProject.Title</x></div>
                <div id="supervisor">by: <x onclick="@(() => _navigationManager.NavigateTo($"/user/{_currentProject.AuthorName}"))" style="cursor: pointer;"> @_currentProject.AuthorName</x></div>
                <br/>
                <hr/>
                <br/>
                <textarea class="project_description" readonly="readonly">@_currentProject.Description</textarea>
                @*<img class="card-img-top" src=@_currentProject.ImageUrl alt = "Project image">*@
                <br/>
                <hr/>
                <br/>
                <textarea class="project_keywords" readonly="readonly">Keywords: @_keywordString
Degree: @_currentProject.Degree</textarea>
            </div>
        </div>
    </div>
    
        <div class="like_and_dislike_btn_div">
            <button id="dislike_btn" @onclick="(() => CheckClick(ClickType.Dislike))">
                <label id="x_icon" class="oi oi-x"></label>
            </button>
            <button id="re-watch_btn" @onclick="(() => CheckClick(ClickType.Rewatch))">
                <label id="re-watch_icon" class="oi oi-action-undo"></label>
            </button>
            <button id="like_btn" @onclick="(() => CheckClick(ClickType.Like))">
                <label id="star_icon" class="oi oi-star"></label>
            </button>
        </div> 
}

@code
{
    [Parameter]
    public string? keyword { get; set; }
    
    [Parameter]
    public int? degreeInt { get; set; } = 3;
    
    private readonly IKeywordFinder keywordFinder = new KeywordFinder();
    private const int _i = 10;
    private int _indexCounter;
    private List<int> _likedProjectIds; //This is only used to mimic the database collection of saved projects, st. we dont have to do unnecessary API calls. 
    private Stack<int> _seenProjectIds = new Stack<int>();
    private int _countOfProjects;
    private Degree _degree = Degree.Unspecified;
    private ProjectDetailsDto _currentProject;
    private ClickType _lastClick;
    private ClaimsPrincipal? _user;
    private string? _aToken;
    private string _keywordString;

    enum Notification
    {
        Success,
        Error,
        Info
    }
    
    protected override async Task OnInitializedAsync()
    {
        _degree = (Degree) degreeInt;

        try
        {      
            if (keyword == "all"){
                await keywordFinder.Setup(Http, _degree);
                
                var nextKeyword = keywordFinder.FindWeightedRandomKeyword();
                _currentProject = await keywordFinder.ReadProjectGivenKeywordAsync(nextKeyword);
            } else
            {                
                _currentProject = await Http.GetFromJsonAsync<ProjectDetailsDto>($"/api/Keyword/typeOption/{keyword}/{_indexCounter}/{_degree}");
                _countOfProjects = await Http.GetFromJsonAsync<int>($"/api/Keyword/count/{keyword}");
            }

            _seenProjectIds.Push(_currentProject.Id);
            _indexCounter++;

            _user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
            _aToken = _user.FindFirst(c => c.Type.Contains("aud"))?.Value;
            _likedProjectIds = await Http.GetFromJsonAsync<List<int>>($"/api/Account/likedProduct/{_aToken}"); //will return an empty list, if found no saved projects for that user.

            _keywordString = GetKeyWords();

            //Only works if lastClick is rewatch
            _lastClick = ClickType.Rewatch;
        
        } catch (AccessTokenNotAvailableException e)
        {
            e.Redirect();
        } catch (System.Text.Json.JsonException)
        {

        }
    }

    private enum ClickType
    {
        Like,
        Dislike,
        Rewatch
    }

    private async void CheckClick(ClickType s)
    {
        switch (s)
        {
            case ClickType.Like: //vi skal lave check på status endpoint kald sender tilbage, så vi kan gøre noget alt efter det. så vi ik bare fortsætter midnless
            
                if (!_likedProjectIds.Contains(_currentProject.Id))
                {
                    await addLikedProject();
                    if (keyword == "all") 
                    {
                        await UpdateRatios(true);
                    }
                } else
                {
                    ShowNotification("You had already liked project: " + _currentProject.Title, Notification.Info); 
                }

                _lastClick = ClickType.Like;
                
                if (keyword == "all")
                {
                    await FindNextProjectAll();
                } else
                {
                    await FindNextProject();
                }
                
                break;

            case ClickType.Rewatch:
            
                if (_seenProjectIds.Count() > 1)
                {
                    var index = _seenProjectIds.Peek();
                    if (_currentProject.Id == index){
                        _seenProjectIds.Pop();
                    }
                    if (_seenProjectIds.Count > 2)
                    {
                        _currentProject = await Http.GetFromJsonAsync<ProjectDetailsDto>($"/api/Project/{_seenProjectIds.Pop()}");
                    }
                    else
                    {
                        _currentProject = await Http.GetFromJsonAsync<ProjectDetailsDto>($"/api/Project/{_seenProjectIds.Peek()}");
                    }
                } else
                {
                    _currentProject = await Http.GetFromJsonAsync<ProjectDetailsDto>($"/api/Project/{_seenProjectIds.Peek()}");
                    ShowNotification("You can't reverse any more", Notification.Error);
                }

                if (_lastClick == ClickType.Like && _likedProjectIds.Contains(_currentProject.Id))
                {
                    await removeLikedProject();
                }
                
                _lastClick = ClickType.Rewatch;

                break;
            
            case ClickType.Dislike:
            
                if (_likedProjectIds.Contains(_currentProject.Id))
                {
                    await removeLikedProject();
                }

                _lastClick = ClickType.Dislike;

                if (keyword == "all")
                {
                    await FindNextProjectAll();
                } else
                {
                    await FindNextProject();
                }
                
                break;
        }

        _keywordString = GetKeyWords();

        await InvokeAsync(StateHasChanged);
    }

    private async Task FindNextProjectAll()
    {
        var nextKeyword = keywordFinder.FindWeightedRandomKeyword();
        var project = await keywordFinder.ReadProjectGivenKeywordAsync(nextKeyword);
        
        if (project != null){
            _currentProject = project;
        }

        _seenProjectIds.Push(_currentProject.Id);
    }

    private async Task FindNextProject()
    {
        if (_indexCounter < _countOfProjects - 1)
        {
            _currentProject = await Http.GetFromJsonAsync<ProjectDetailsDto>($"/api/Keyword/typeOption/{keyword}/{_indexCounter}/{_degree}");
            _seenProjectIds.Push(_currentProject.Id);
            _indexCounter++;
            
        } else
        {
            ShowNotification("No more projects to show. Rewatch to see projects again, or pick a new keyword", Notification.Error);
        }
    }

    private async Task UpdateRatios(bool userLikedProject)
    {
        foreach (var keyWordName in _currentProject.Keywords)
        {
            var response = keywordFinder.UpdateRatioAsync(keyWordName, userLikedProject);
        }
    }
    
    private string GetKeyWords()
    {
        return _currentProject.Keywords != null ? string.Join(", ", _currentProject.Keywords) : "none";

    }
    
    private void ShowNotification(string message, Notification type)
    {
        var notiMsg = new NotificationMessage();
        
        //TODO change this to enum instead of int

        switch (type)
        {
            case Notification.Success:
                notiMsg = new NotificationMessage {Severity = NotificationSeverity.Success, Summary = "Success", Detail = message, Duration = 2000};
                break;
            
            case Notification.Error:
                notiMsg = new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "Error", Detail = message, Duration = 4000};
                break;

            case Notification.Info:
                notiMsg = new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "Info", Detail = message, Duration = 4000};
                break;
            
        }
        
        notificationService.Notify(notiMsg); 
        
    }
    
    //----- private helper methods -----

    private async Task removeLikedProject()
    {
        await Http.PutAsJsonAsync($"api/Account/{_aToken}/remove", _currentProject.Title);
        _likedProjectIds.Remove(_currentProject.Id);
        projectChanged.RemoveSavedProjects(_currentProject.Title);
        
        ShowNotification("Project removed: " + _currentProject.Title, Notification.Success);
    }
    
    private async Task addLikedProject()
    {
        await Http.PostAsJsonAsync($"api/Account/{_aToken}", _currentProject.Title); //vil måske gerne lave om til den også får et id, nah fuck it
        _likedProjectIds.Add(_currentProject.Id);
        projectChanged.AddSavedProjects(_currentProject.Title);
                    
        ShowNotification("Project added: "+_currentProject.Title, Notification.Success);
    }

}   