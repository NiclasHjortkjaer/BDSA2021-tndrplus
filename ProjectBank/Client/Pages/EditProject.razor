@page "/editproject/{Id}"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService _notificationService
@inject NavigationManager _navigationManager

@if (_oldProject == null){
<h3>Loading ...</h3>
} else if (_oldProject.AuthorToken != _token){
<h3>You do not have permission to edit this project.</h3>
} else {
<RadzenFieldset class="mb-4">
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Title:"/>
        </div>
        <div class="col-md-9">
            <RadzenTextBox MaxLength=100 Disabled=false Placeholder="Choose a title" @bind-Value="_project.Title" Change=@(args => OnChange(args, "TextArea with placeholder")) style="width: 50%;" Name="ProjectName"/>
        </div>
    </div>
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Description:"/>
        </div>
        <div class="col-md-9">
            <RadzenTextArea MaxLength=500 Placeholder="Enter here..." @bind-Value="_project.Description" Change=@(args => OnChange(args, "TextArea with placeholder")) Style="height:200px" Class="w-100"/>
        </div>
    </div>
    <div class="row">
        <div class="align-items-center d-flex col-md-3">
            <RadzenLabel Text="Degree:"/>
        </div>
        <div class="col-md-9">
            <RadzenDropDown AllowClear="true" Item="enums" T="enums" Class="w-100" @bind-Value="_project.Degree" Data="_degrees"/>
        </div>
    </div>
    <div class="row">
        <div class="align-item-center d-flex col-md-3">
            <RadzenLabel Text="ETCs"/>
        </div>
        <div class="col-md-9">
            <RadzenDropDown AllowClear="true" TValue="float?" Class="w-100" @bind-Value="_project.Ects"
                            Data="_etcs"/>
        </div>
    </div>
    <div class="row">
        <div class="align-item-center d-flex col-md-3">
            <RadzenLabel Text="Keywords:"/>
        </div>
        <div class="col-md-9">
            <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@_multipleValues Multiple="true" Data=@_keywords
                           Style="height:200px;color:black;" Class="w-100"/>
        </div>
        <RadzenButton style="width: 160px" Icon="save" BusyText="Saving ..." IsBusy=@_busy Click=@UpdateProject Text="Save"/>
    </div>
</RadzenFieldset>
}

@code{
    [Parameter]
    public string Id { get; set; }
    private string _token;
    private ProjectDetailsDto _oldProject;
    private ProjectUpdateDto _project = new();
    private List<string> _keywords = new();
    Enum[] _degrees = {Degree.Bachelor, Degree.Master, Degree.PHD};
    float[] _etcs = {7.5f, 15f};
    private IEnumerable<string> _multipleValues;
    bool _busy;
    
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var name = user.Identity?.Name;
            _token = user.FindFirst(c => c.Type.Contains("aud"))?.Value;

            try
            {
                _oldProject = await Http.GetFromJsonAsync<ProjectDetailsDto>("api/Project/"+Id.ToString());
                _multipleValues = _oldProject.Keywords;
                _project.AuthorToken = _token;
                _project.AuthorName = name;
                _project.Title = _oldProject.Title;
                _project.Description = _oldProject.Description;
                _project.Degree = _oldProject.Degree;
                _project.ImageUrl = _oldProject.ImageUrl;
                _project.FileUrl = _oldProject.FileUrl;
                _project.LastUpdated = _oldProject.LastUpdated;
                _project.Ects = _oldProject.Ects;
                _project.Id = Int32.Parse(Id);
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        
            try
            {
                var _dtoKeywords = await Http.GetFromJsonAsync<KeywordDto[]>("/api/Keyword");
                if (_dtoKeywords != null){
                    foreach (var keyword in _dtoKeywords)
                    {
                        _keywords.Add(keyword.Word);
                    }
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }

    private async Task UpdateProject()
    {
        _busy = true;

        //Update project
        _project.LastUpdated = DateTime.UtcNow;
        ISet<string> keySet = new HashSet<string>();
        foreach (var keyword in _multipleValues)
        {
            keySet.Add(keyword);
        }
        _project.Keywords = keySet;

        if (_project.AuthorName == null || _project.AuthorToken == null)
        {
            NotificationMessage error = new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "Something wrong with authentication right now", Detail = "", Duration = 4000};
            _notificationService.Notify(error);
        }
        else if (_project.Title.Length < 1)
        {
            NotificationMessage error = new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "Title cannot be left empty", Detail = "Fix please", Duration = 4000};
            _notificationService.Notify(error);
        }
        else if (_project.Keywords.Count == 0)
        {
            NotificationMessage error = new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "You must choose at least 1 keyword", Detail = "Fix please", Duration = 4000};
            _notificationService.Notify(error);
        }
        else
        {
            if (_project.Description != null && _project.Description.Length < 1)
            {
                NotificationMessage info = new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "You have no description", Detail = "", Duration = 4000};
                _notificationService.Notify(info);
            }
            if (_project.Degree == null)
            {
                NotificationMessage info = new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "You have chosen no degree", Detail = "", Duration = 4000};
                _notificationService.Notify(info);
            }
            if (_project.Ects == null)
            {
                NotificationMessage info = new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "You have chosen no ETCs", Detail = "", Duration = 4000};
                _notificationService.Notify(info);
            }

            try
            {
                var response = await Http.PutAsJsonAsync($"api/Project/{Id}", _project);

                if (response.IsSuccessStatusCode)
                {
                    NotificationMessage success = new NotificationMessage {Severity = NotificationSeverity.Success, Summary = "Success creating project!", Detail = "Now in database", Duration = 4000};
                    _notificationService.Notify(success);
                    await Task.Delay(2000);
                    _navigationManager.NavigateTo($"/createproject/AdditionalProjectSetup/{Id}", true);
                }
                else
                {
                    NotificationMessage error = new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "Something went wrong", Detail = "Project not saved", Duration = 4000};
                    _notificationService.Notify(error);
                    
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
        //END
        _busy = false;
    }
    void OnChange(string value, string name)
    {
    }
}