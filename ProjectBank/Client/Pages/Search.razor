@page "/search"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<PageTitle>ProjectBank - Search</PageTitle>

<div class="searchBar_wrapper">
    <input @bind="_searchText" @onkeyup="Enter" type="text" class="searchBar" runat="server" name="Search_input" placeholder="Search... Project Title, Supervisor, or #Keyword">
    <button class="btn_search" @onclick="LoadProjects"> <span class="oi oi-magnifying-glass" style="color: #212121;" aria-hidden="true"></span></button>
</div>

@if (_projects != null)
{
    @foreach (var project in _projects)
    {
        <br/>
        <div class="project_center">
            <div class="project_builder_search" id="P_@project.Id">
                <div class="project_search_content">
                    <div class="like_star">
                        @if (_likedProjects.Contains(project.Title))
                        {
                            <input type="checkbox" class="star_checkbox" id="star_checkbox_@project.Id" checked="checked" @onchange="() => AddOrRemoveFavorite(project.Title)"/>
                            <label class="oi oi-star" id="star_@project.Id" for="star_checkbox_@project.Id"></label>
                        }
                        else
                        {
                            <input type="checkbox" class="star_checkbox" id="star_checkbox_@project.Id" unchecked="true" @onchange="() => AddOrRemoveFavorite(project.Title)"/>
                            <label class="oi oi-star" id="star_@project.Id" for="star_checkbox_@project.Id"></label>
                        }
                    </div>
                    <div id="project_search_title">Title: @project.Title </div>
                    <div id="search_supervisor">by: <x onclick="">@project.AuthorName</x></div>
                    <br>
                    <hr>
                    <br>
                    <textarea class="project_search_description" readonly="readonly">@project.Description</textarea>

                    <label class="see_more" id="see_more_@project.Id" onclick="
                        document.getElementById('see_more_@project.Id').style.display='none';
                        document.getElementById('expand_@project.Id').style.display='block';
                    " for="P_@project.Id">See more</label>

                    <div class="expanded_content" id="expand_@project.Id" for="P_@project.Id" style="display: none">
                        <br>
                        <hr>
                        <br>
                        <textarea class="project_search_keywords" readonly="readonly">@string.Join(", ", project.Keywords)</textarea>
                        <br>
                        <hr>
                        <br>
                        <label class="project_search_Ects" readonly="readonly">Ects: @project.Ects </label>
                        <br>
                        <label class="project_search_degree" readonly="readonly">Degree: @project.Degree </label>
                        <br>
                        <label class="close_more" id="close_more_@project.Id" onclick="
                        document.getElementById('expand_@project.Id').style.display='none';
                        document.getElementById('see_more_@project.Id').style.display='block';
                        
                      ">Close</label>
                    </div>
                </div>
            </div>
        </div>
    }
}
    <br/>
@if (_projects is {Length: >= 1 })
{
    <button class="to_top_button" id="top_btn" onclick="document.body.scrollTop = 0; document.documentElement.scrollTop = 0;">
        <label class="oi oi-arrow-top" id="to_top_label" style="margin: 0;"></label>
    </button>
}

@code {
    private string _searchText = "";
    ProjectDetailsDto[]? _projects;

    async Task LoadProjects()
    {
        await OnSearch();
        try
        {
            _projects = await Http.GetFromJsonAsync<ProjectDetailsDto[]?>($"/api/SearchQuery/{_searchText}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        await InvokeAsync(StateHasChanged);
    }

    //TODO opdater det her, så dataet på hjemmesiden bliver loaded på første klik
    async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
    //await LoadProjects();
            await OnSearch();
            try
            {
                _projects = await Http.GetFromJsonAsync<ProjectDetailsDto[]?>($"/api/SearchQuery/{_searchText}");
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private IEnumerable<string> _likedProjects = null!;
    private string? _aToken;

    protected async Task OnSearch()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var _user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
            if (_user != null){
                var _claims = _user.Claims;
                _aToken = _user.FindFirst(c => c.Type.Contains("aud"))?.Value;
                var account = await Http.GetFromJsonAsync<AccountDetailsDto>($"/api/Account/{_aToken}");
                if (account != null)
                {
                    _likedProjects = account.SavedProjects;
                }
            }
        }
    }
    
    private async Task AddOrRemoveFavorite(string t)
    {

        if (_likedProjects.Contains(t))
        {
            await Http.PutAsJsonAsync($"api/Account/{_aToken}/remove", t);
        }
        
        if (!_likedProjects.Contains(t))
        {
            await Http.PostAsJsonAsync($"api/Account/{_aToken}", t);
        }
    }
}

