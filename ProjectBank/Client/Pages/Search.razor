@page "/search"
@using System.Data.SqlTypes
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject ProjectStateChanged projectChanged
@inject NavigationManager _navigationManager

<PageTitle>ProjectBank - Search</PageTitle>
<div class="search_filter_grid">
<div class="search_container">
    <div class="searchBar_wrapper">
        @if (!_isDropedDown)
        {
            <button class="filter_btn" @onclick="dropdown">Filter <span class="oi oi-chevron-bottom"></span></button>
        }
        else
        {
            <button class="filter_btn" @onclick="dropdown" style="border-bottom-left-radius: 0">Filter <span class="oi oi-chevron-top"></span></button>
        }
        <input @bind="_searchText" @onkeyup="Enter" type="text" class="searchBar" runat="server" name="Search_input" maxlength="100" placeholder="Search... Project Title, Supervisor, or #Keyword">
        <button class="btn_search" @onclick="LoadProjects"><span class="oi oi-magnifying-glass" style="color: #212121;" aria-hidden="true"></span></button>
    </div>
<div class="filter_wrapper">
    @if (_isDropedDown)
    {
        <div class="dropdown_menu_filter">
            <div class="drop_filter_content">

                <EditForm EditContext="this.editContext">
                    <p1 style="text-decoration: underline; font-weight: bold;">
                        @model.Value:
                    </p1>
                    <div>
                        <InputRadioGroup @bind-Value="model.Selected">
                            @foreach (var option in model.Options)
                            {
                                <div class="radio1">
                                    <InputRadio  Value="option.Value" id="@option.Value" style="outline: none; border: none;"/>
                                    <label for="@option.Value" style="cursor: pointer">@option.Value</label>
                                </div>
                            }
                        </InputRadioGroup>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>
</div>
</div>

@if (_projects != null)
{
    @foreach (var project in _projects)
    {
        <br/>
        <div class="project_center">
            <div class="project_builder_search" id="P_@project.Id">
                <div class="project_search_content">
                    <div class="like_star">
                        @if (_likedProjects.Contains(project.Title))
                        {
                            <input type="checkbox" class="star_checkbox" id="star_checkbox_@project.Id" checked="checked" @onchange="() => AddOrRemoveFavorite(project.Title)"/>
                            <label class="oi oi-star" id="star_@project.Id" for="star_checkbox_@project.Id"></label>
                        }
                        else
                        {
                            <input type="checkbox" class="star_checkbox" id="star_checkbox_@project.Id" unchecked="true" @onchange="() => AddOrRemoveFavorite(project.Title)"/>
                            <label class="oi oi-star" id="star_@project.Id" for="star_checkbox_@project.Id"></label>
                        }
                    </div>
                    <div id="project_search_title">Title: <x onclick="@(() => _navigationManager.NavigateTo($"/projects/{project.Id}"))" style="cursor: pointer;">@project.Title</x></div>
                    <div id="search_supervisor">by: <x onclick="@(() => _navigationManager.NavigateTo($"/user/{project.AuthorName}"))" style="cursor: pointer;">@project.AuthorName</x></div>
                    <br>
                    <hr>
                    <br>
                    <textarea class="project_search_description" readonly="readonly">@project.Description</textarea>

                    <label class="see_more" id="see_more_@project.Id" onclick="
                        document.getElementById('see_more_@project.Id').style.display='none';
                        document.getElementById('expand_@project.Id').style.display='block';
                    " for="P_@project.Id">See more</label>

                    <div class="expanded_content" id="expand_@project.Id" for="P_@project.Id" style="display: none">
                        <br>
                        <hr>
                        <br>
                        <textarea class="project_search_keywords" readonly="readonly">@string.Join(", ", project.Keywords)</textarea>
                        <br>
                        <hr>
                        <br>
                        <label class="project_search_Ects" readonly="readonly">Ects: @project.Ects </label>
                        <br>
                        <label class="project_search_degree" readonly="readonly">Degree: @project.Degree </label>
                        <br>
                        <label class="close_more" id="close_more_@project.Id" onclick="
                        document.getElementById('expand_@project.Id').style.display='none';
                        document.getElementById('see_more_@project.Id').style.display='block';
                        
                      ">Close</label>
                    </div>
                </div>
            </div>
        </div>
    }
}
    <br/>
@if (_projects is {Length: >= 1 })
{
    <button class="to_top_button" id="top_btn" onclick="document.body.scrollTop = 0; document.documentElement.scrollTop = 0;">
        <label class="oi oi-arrow-top" id="to_top_label" style="margin: 0;"></label>
    </button>
}


@code {

    private string _searchText = "";
    ProjectDetailsDto[]? _projects;

    private EditContext editContext;
    private DegreeModel model;

    protected override Task OnInitializedAsync()
    {
        model = new DegreeModel() { Value = "Degrees" };
        editContext = new EditContext(model);
        return Task.CompletedTask;
    }

    async Task LoadProjects()
    {
        await OnChange();

        if (model.Selected == Degree.Unspecified)
        {
            try
            {
                _projects = await Http.GetFromJsonAsync<ProjectDetailsDto[]?>($"/api/SearchQuery/{_searchText}");
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
        else
        {
            _projects = await Http.GetFromJsonAsync<ProjectDetailsDto[]?>($"/api/SearchQuery/{_searchText}/{model.Selected}");
        }

        await InvokeAsync(StateHasChanged);
    }

    //TODO opdater det her, så dataet på hjemmesiden bliver loaded på første klik
    async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            await LoadProjects();
        }
    }

    private IEnumerable<string> _likedProjects = null!;
    private string? _aToken;

    private async Task OnChange()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var _user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
            if (_user != null){
                var _claims = _user.Claims;
                _aToken = _user.FindFirst(c => c.Type.Contains("aud"))?.Value;
                var account = await Http.GetFromJsonAsync<AccountDetailsDto>($"/api/Account/{_aToken}");
                if (account != null)
                {
                    _likedProjects = account.SavedProjects;
                }
            }
        }
        _isDropedDown = false;
    }

    
    private async Task AddOrRemoveFavorite(string title)
    {
        if (_likedProjects.Contains(title))
        {
            await Http.PutAsJsonAsync($"api/Account/{_aToken}/remove", title);
            projectChanged.RemoveSavedProjects(title);
        }

        if (!_likedProjects.Contains(title))
        {
            await Http.PostAsJsonAsync($"api/Account/{_aToken}", title);
            projectChanged.AddSavedProjects(title);
        }
        await OnChange();
    }

    private bool _isDropedDown;

    private void dropdown()
    {
        _isDropedDown = !_isDropedDown;
    }
}